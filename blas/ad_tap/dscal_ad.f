C        Generated by TAPENADE     (INRIA, Ecuador team)
C  Tapenade 3.15 (master) -  8 Jan 2020 10:48
C
C  Differentiation of dscal in reverse (adjoint) mode (with options noISIZE i8):
C   gradient     of useful results: dx da
C   with respect to varying inputs: dx da
C
C
C> \brief \b DSCAL
C
C  =========== DOCUMENTATION ===========
C
C Online html documentation available at
C            http://www.netlib.org/lapack/explore-html/
C
C  Definition:
C  ===========
C
C       SUBROUTINE DSCAL(N,DA,DX,INCX)
C
C       .. Scalar Arguments ..
C       DOUBLE PRECISION DA
C       INTEGER INCX,N
C       ..
C       .. Array Arguments ..
C       DOUBLE PRECISION DX(*)
C       ..
C
C
C> \par Purpose:
C  =============
C>
C> \verbatim
C>
C>    DSCAL scales a vector by a constant.
C>    uses unrolled loops for increment equal to 1.
C> \endverbatim
C
C  Arguments:
C  ==========
C
C> \param[in] N
C> \verbatim
C>          N is INTEGER
C>         number of elements in input vector(s)
C> \endverbatim
C>
C> \param[in] DA
C> \verbatim
C>          DA is DOUBLE PRECISION
C>           On entry, DA specifies the scalar alpha.
C> \endverbatim
C>
C> \param[in,out] DX
C> \verbatim
C>          DX is DOUBLE PRECISION array, dimension ( 1 + ( N - 1 )*abs( INCX ) )
C> \endverbatim
C>
C> \param[in] INCX
C> \verbatim
C>          INCX is INTEGER
C>         storage spacing between elements of DX
C> \endverbatim
C
C  Authors:
C  ========
C
C> \author Univ. of Tennessee
C> \author Univ. of California Berkeley
C> \author Univ. of Colorado Denver
C> \author NAG Ltd.
C
C> \date November 2017
C
C> \ingroup double_blas_level1
C
C> \par Further Details:
C  =====================
C>
C> \verbatim
C>
C>     jack dongarra, linpack, 3/11/78.
C>     modified 3/93 to return if incx .le. 0.
C>     modified 12/3/93, array(1) declarations changed to array(*)
C> \endverbatim
C>
C  =====================================================================
      SUBROUTINE DSCAL_AD(n, da, da_ad, dx, dx_ad, incx)
      IMPLICIT NONE
C
C  -- Reference BLAS level1 routine (version 3.8.0) --
C  -- Reference BLAS is a software package provided by Univ. of Tennessee,    --
C  -- Univ. of California Berkeley, Univ. of Colorado Denver and NAG Ltd..--
C     November 2017
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION da
      DOUBLE PRECISION da_ad
      INTEGER incx, n
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION dx(*)
      DOUBLE PRECISION dx_ad(*)
C     ..
C
C  =====================================================================
C
C     .. Local Scalars ..
      INTEGER i, m, mp1, nincx
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC MOD
      INTEGER branch
C     ..
      IF (.NOT.(n .LE. 0 .OR. incx .LE. 0)) THEN
        IF (incx .EQ. 1) THEN
C
C        code for increment equal to 1
C
C
C        clean-up loop
C
          m = MOD(n, 5)
          IF (m .NE. 0) THEN
            DO i=1,m
              CALL PUSHREAL8(dx(i))
              dx(i) = da*dx(i)
            ENDDO
            IF (n .LT. 5) THEN
              GOTO 100
            ELSE
              CALL PUSHCONTROL1B(0)
            END IF
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          mp1 = m + 1
          DO i=mp1,n,5
            CALL PUSHREAL8(dx(i))
            dx(i) = da*dx(i)
            CALL PUSHREAL8(dx(i+1))
            dx(i+1) = da*dx(i+1)
            CALL PUSHREAL8(dx(i+2))
            dx(i+2) = da*dx(i+2)
            CALL PUSHREAL8(dx(i+3))
            dx(i+3) = da*dx(i+3)
            CALL PUSHREAL8(dx(i+4))
            dx(i+4) = da*dx(i+4)
          ENDDO
          DO i=n-MOD(n-mp1, 5),mp1,-5
            CALL POPREAL8(dx(i+4))
            CALL POPREAL8(dx(i+3))
            CALL POPREAL8(dx(i+2))
            CALL POPREAL8(dx(i+1))
            CALL POPREAL8(dx(i))
            da_ad = da_ad + dx(i+4)*dx_ad(i+4) + dx(i+3)*dx_ad(i+3) + dx
     +        (i+2)*dx_ad(i+2) + dx(i+1)*dx_ad(i+1) + dx(i)*dx_ad(i)
            dx_ad(i+4) = da*dx_ad(i+4)
            dx_ad(i+3) = da*dx_ad(i+3)
            dx_ad(i+2) = da*dx_ad(i+2)
            dx_ad(i+1) = da*dx_ad(i+1)
            dx_ad(i) = da*dx_ad(i)
          ENDDO
          CALL POPCONTROL1B(branch)
          IF (branch .NE. 0) GOTO 110
 100      DO i=m,1,-1
            CALL POPREAL8(dx(i))
            da_ad = da_ad + dx(i)*dx_ad(i)
            dx_ad(i) = da*dx_ad(i)
          ENDDO
        ELSE
C
C        code for increment not equal to 1
C
          nincx = n*incx
          DO i=nincx-MOD(nincx-1, incx),1,-incx
            da_ad = da_ad + dx(i)*dx_ad(i)
            dx_ad(i) = da*dx_ad(i)
          ENDDO
        END IF
      END IF
 110  CONTINUE
      END

